{
    "docs": [
        {
            "location": "/",
            "text": "hammerJS\n\n\nA Command line tool (CLI) that utilizes recheck-clientjs-library. You can connect and do various things on a blockchain. \n\n\nUsage: \nhammer [options] [command]\n\n\nOptions:\n\n\n  -V, --version                                         output the version number\n  -i, --identity-file <file>                            specify identity file\n  -p, --password <identityPass>                         specify identity password\n  -u, --host-url <hostUrl>                              specify api url, default is http://localhost:3000\n  -h, --help                                            output usage information\n\n\n\n\nCommands:\n\n\n  new [options] <identity-name>                         create a new account\n  password <new-password>                               set new account password\n  sign-message <message>                                sign a message\n  verify-message [options] <message> <signature>        check a message signature\n  recover [options] <identity-name>                     restore an account from seed phrase\n  reveal [options]                                      display account details\n  login [options]                                       obtain an API token\n  put <file-name>                                       stores file securely and timestamps it\n  get [options] <file-id>                               securely fetch and decrypt a file\n  share <file-id> <recipient-id> [moreRecipientIds...]  share securely a file with multiple recipients\n  verify <file-id> <file-name>                          verify the file identifier against the content file\n  register-hash [options] <file-id>                     register file identifier\n  check-hash [options] <file-id>                        check the file identifier and retrieve tx info\n  exec [options] <selection-hash>                       execute command on a selection\n\n\n\n\nExamples\n\n\nAll of the different examples in using the tool.\n\n\nnode hammer --help\n - leads you to all avaiable commands\n\n\nnode hammer <command> --help\n - this will give you information about all the different options of the command you want to use. \n\n\nThe first thing the user has to do is create a new account. This is done by the command \nnew\n. This command is going to create user's identity and put it into a file. The parameters needed for the command are two - the name of the file and the password for that identity. \n\n\nnew\n\n\nnode hammer new <filename> -e <encryption password>\n\n\nnode hammer new user -e 123\n\n\nExample output _ - _Recovery phrase: shown use nodal twain burton chute demur hue gg bode culpa least\n and a file user.re, containing the key pairs, adress and recovery phrase. \n\n\nTHE RECOVERY PHRASE SHOULD BE KEPT SOMEWHERE SAFE, IF YOU LOSE IT NO ONE CAN RESTORE YOUR BLOCKCHAIN IDENTITY\n\n\nNow that you have your identity you can continue using the rest of the commands. \n\n\nreveal\n\n\nFirst thing you should do, if you already have not, is to \nwrite down your recovery phrase on a paper or somewhere else where it will be safe from outsiders\n.\n\n\nnode hammer reveal -i <yourKeysFile.re> -p <yourPassword>\n\n\nreturns\n\n- public address - this is also your blockchain ID\n- public signing key \n- public encryption key \n\n\nnode hammer reveal -i <yourKeysFile.re> -p <yourPassword> -k\n\n\nreturns\n\n- public address\n- public signing key\n- private signing key\n\n- public encryption key\n- private encryption key  \n\n\nnode hammer reveal -i <yourKeysFile.re> -p <yourPassword> -r\n\n\nreturns\n\n- public address\n- public signing key\n- public encryption key\n- Recovery phrase: <12 words> - \nkeep them somewhere safe\n\n\nIf you put both -r and -k options, you will receive the whole info about your key pairs. \n\n\npassword\n\n\nSetting new password to your keys. \n\n\nnode hammer password <new password> -i yourKeysFile.re -p <password>\n\n\nsign-message\n\n\nSignes a text or file.\n\n\nnode hammer sign-message -i user-eth-1234.re -p 1234 message\n\n\nreturns\n hash with the signature. \n\nSignature: 0xdfc6f3a406f168eab0b6e0e7ec0bed942ee1b81f78d77a23738deb25390d42293e45f6243b648d140d0eba9a10419f3244b1847152858bb58c07be419c56f67e1c\n\n\nverify-message\n\n\nIt checks the message signature. This function asks for the message/file that has been signed, the signature hash and the public key of the person who signed it. The user can choose to use their file with pair keys instead. \n\n\nnode hammer verify-message LICENSE 0xdfc6f3a406f168eab0b6e0e7ec0bed942ee1b81f78d77a23738deb25390d42293e45f6243b648d140d0eba9a10419f3244b1847152858bb58c07be419c56f67e1c -i user-eth-1234.re -p 1234\n\n\nReturns\n\n\nPublic key not defined. Will use user specified identity.\n\n\nMessage is signed with public address 0xAc9d0B1242c0233ff5Cf40d84578140400f35DbA\n\n\nrecover\n\n\nRestores the account from the recovery phrase. \nThis is the only way to restore your lost key pairs!\n\n\nnode hammer recover <yourNewFileName> -e <yourNewPassword> -r <\"your recovery phrase of 12 words\">\n\n\nnode hammer recover user -e 1234 -r \"shown use nodal twain burton chute demur hue gg bode culpa least\"\n\n\nreturns\n\n\nAccount recovered 7c0a37cee147b31a86175780b65d10777a157d8ab2075566bba4ab277c799cc18ad9b7b157d6a23ff61805ae74d253a68e1ed42243b20404a191febe81f3ba8e\n\n\nlogin / get Token\n\n\nThis command allows you to log into the blockchain and more importantly to receive a \ntoken\n that you are going to use for communication with the server. \n\n\nnode hammer login -i <yourKeysFile.re> -p <yourPassword>\n\n\nnode hammer login -i user-eth-1234.re -p 1234\n\n\nReturns\n\nExample - \nf47533d6-b7b1-4b00-b136-ed501897456b\n - the token needed for communication with the server.\n\n\nput / upload a file on the blockchain\n\n\nThis command uploads the document on the blockchain. Keep in mind which blockchain network you are using. At the moment our service supports \nEthereum\n and \nAEternity\n. It is easy to distinguish them with \nnode hammer reveal\n, as the aethernity adress and public sign key starts with ak_..., whereas the eth address starts with 0x...\n\n\nnode hammer put <file> -i <yourKeysFile.re> -p <yourPassword>\n\n\nExample\n\n\nnode hammer put LICENSE -i user-eth-1234.re -p 1234\n\n\nReturns\n\n\nName of the file\n and \ntheir hash on the blockchain\n\n\nLICENSE   0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274\n\n\nget / download a file from the blockchain\n\n\nThe get command gives a lot of options, because you may want different things from file that is already on the chain. \n\n\nOptions:\n  -s, --save-file               store result in local file\n  -o, --output-file <file>      specify output file\n  -r, --request-tx-receipt      get tx receipt\n  -t, --tx-receipt-file <file>  specify tx receipt file\n  -n, --disable-print           no print in stdio, used with --request-tx-receipt\n  -h, --help                    output usage information\n\n\n\n\nExamples\n\n- command -s --save-file\n  \nnode hammer get -s 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234\n\n\nReturns\n - downloads the file into the local folder. \n- command -o --output-file < file > \n  Downloads the file which is on the blockchain as bytes that will be put in a specified file by the user.\n\n\nnode hammer get -o \"example.txt\" 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234\n\n\nReturns\n - downloads the bytes of the file into specified file by the user, in this case - example.txt is the file being outputted. \n\n\n\n\nr --request-tx-receipt\n  Outputs the transaction receipt. \n\n\n\n\nnode hammer get -r 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234\n\n\nReturns\n - a file with the tx and the tx in the console\n  \nTUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAyMCBSZUNoZWNrCgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5Cm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbApjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbApjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQpBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFClNPRlRXQVJFLgo=\n\n\n\n\nt --tx-receipt-file < file >\n  Outputs the transaction receipt in the console and saves it in the user specified file. \n\n\n\n\nnode hammer get -t tx.txt 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234\n\n\nReturns\n - the transaction receipt in tx.txt \n\n\n\n\nn --disable-print \n\n\n\n\nWith this command you will not get the tx-receipt in the console, only in the file.\n\n\nnode hammer get -t tx.txt 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234 -n\n\n\nshare\n\n\nShares a file with other users in the system. Can share to as many as the user wants\n\n\nnode hammer share <fileChainID> <recipientUserChainID> <anotherRecipientUserChainID> -i user-eth-1234.re -p 1234\n\n\nverify\n\n\nregister-hash\n\n\ncheck-hash\n\n\nexec",
            "title": "Home"
        },
        {
            "location": "/#hammerjs",
            "text": "A Command line tool (CLI) that utilizes recheck-clientjs-library. You can connect and do various things on a blockchain.   Usage:  hammer [options] [command]  Options:    -V, --version                                         output the version number\n  -i, --identity-file <file>                            specify identity file\n  -p, --password <identityPass>                         specify identity password\n  -u, --host-url <hostUrl>                              specify api url, default is http://localhost:3000\n  -h, --help                                            output usage information  Commands:    new [options] <identity-name>                         create a new account\n  password <new-password>                               set new account password\n  sign-message <message>                                sign a message\n  verify-message [options] <message> <signature>        check a message signature\n  recover [options] <identity-name>                     restore an account from seed phrase\n  reveal [options]                                      display account details\n  login [options]                                       obtain an API token\n  put <file-name>                                       stores file securely and timestamps it\n  get [options] <file-id>                               securely fetch and decrypt a file\n  share <file-id> <recipient-id> [moreRecipientIds...]  share securely a file with multiple recipients\n  verify <file-id> <file-name>                          verify the file identifier against the content file\n  register-hash [options] <file-id>                     register file identifier\n  check-hash [options] <file-id>                        check the file identifier and retrieve tx info\n  exec [options] <selection-hash>                       execute command on a selection",
            "title": "hammerJS"
        },
        {
            "location": "/#examples",
            "text": "All of the different examples in using the tool.  node hammer --help  - leads you to all avaiable commands  node hammer <command> --help  - this will give you information about all the different options of the command you want to use.   The first thing the user has to do is create a new account. This is done by the command  new . This command is going to create user's identity and put it into a file. The parameters needed for the command are two - the name of the file and the password for that identity.",
            "title": "Examples"
        },
        {
            "location": "/#new",
            "text": "node hammer new <filename> -e <encryption password>  node hammer new user -e 123  Example output _ - _Recovery phrase: shown use nodal twain burton chute demur hue gg bode culpa least  and a file user.re, containing the key pairs, adress and recovery phrase.   THE RECOVERY PHRASE SHOULD BE KEPT SOMEWHERE SAFE, IF YOU LOSE IT NO ONE CAN RESTORE YOUR BLOCKCHAIN IDENTITY  Now that you have your identity you can continue using the rest of the commands.",
            "title": "new"
        },
        {
            "location": "/#reveal",
            "text": "First thing you should do, if you already have not, is to  write down your recovery phrase on a paper or somewhere else where it will be safe from outsiders .  node hammer reveal -i <yourKeysFile.re> -p <yourPassword>  returns \n- public address - this is also your blockchain ID\n- public signing key \n- public encryption key   node hammer reveal -i <yourKeysFile.re> -p <yourPassword> -k  returns \n- public address\n- public signing key\n- private signing key \n- public encryption key\n- private encryption key    node hammer reveal -i <yourKeysFile.re> -p <yourPassword> -r  returns \n- public address\n- public signing key\n- public encryption key\n- Recovery phrase: <12 words> -  keep them somewhere safe  If you put both -r and -k options, you will receive the whole info about your key pairs.",
            "title": "reveal"
        },
        {
            "location": "/#password",
            "text": "Setting new password to your keys.   node hammer password <new password> -i yourKeysFile.re -p <password>",
            "title": "password"
        },
        {
            "location": "/#sign-message",
            "text": "Signes a text or file.  node hammer sign-message -i user-eth-1234.re -p 1234 message  returns  hash with the signature.  Signature: 0xdfc6f3a406f168eab0b6e0e7ec0bed942ee1b81f78d77a23738deb25390d42293e45f6243b648d140d0eba9a10419f3244b1847152858bb58c07be419c56f67e1c",
            "title": "sign-message"
        },
        {
            "location": "/#verify-message",
            "text": "It checks the message signature. This function asks for the message/file that has been signed, the signature hash and the public key of the person who signed it. The user can choose to use their file with pair keys instead.   node hammer verify-message LICENSE 0xdfc6f3a406f168eab0b6e0e7ec0bed942ee1b81f78d77a23738deb25390d42293e45f6243b648d140d0eba9a10419f3244b1847152858bb58c07be419c56f67e1c -i user-eth-1234.re -p 1234  Returns  Public key not defined. Will use user specified identity.  Message is signed with public address 0xAc9d0B1242c0233ff5Cf40d84578140400f35DbA",
            "title": "verify-message"
        },
        {
            "location": "/#recover",
            "text": "Restores the account from the recovery phrase.  This is the only way to restore your lost key pairs!  node hammer recover <yourNewFileName> -e <yourNewPassword> -r <\"your recovery phrase of 12 words\">  node hammer recover user -e 1234 -r \"shown use nodal twain burton chute demur hue gg bode culpa least\"  returns  Account recovered 7c0a37cee147b31a86175780b65d10777a157d8ab2075566bba4ab277c799cc18ad9b7b157d6a23ff61805ae74d253a68e1ed42243b20404a191febe81f3ba8e",
            "title": "recover"
        },
        {
            "location": "/#login-get-token",
            "text": "This command allows you to log into the blockchain and more importantly to receive a  token  that you are going to use for communication with the server.   node hammer login -i <yourKeysFile.re> -p <yourPassword>  node hammer login -i user-eth-1234.re -p 1234  Returns \nExample -  f47533d6-b7b1-4b00-b136-ed501897456b  - the token needed for communication with the server.",
            "title": "login / get Token"
        },
        {
            "location": "/#put-upload-a-file-on-the-blockchain",
            "text": "This command uploads the document on the blockchain. Keep in mind which blockchain network you are using. At the moment our service supports  Ethereum  and  AEternity . It is easy to distinguish them with  node hammer reveal , as the aethernity adress and public sign key starts with ak_..., whereas the eth address starts with 0x...  node hammer put <file> -i <yourKeysFile.re> -p <yourPassword>  Example  node hammer put LICENSE -i user-eth-1234.re -p 1234  Returns  Name of the file  and  their hash on the blockchain  LICENSE   0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274",
            "title": "put / upload a file on the blockchain"
        },
        {
            "location": "/#get-download-a-file-from-the-blockchain",
            "text": "The get command gives a lot of options, because you may want different things from file that is already on the chain.   Options:\n  -s, --save-file               store result in local file\n  -o, --output-file <file>      specify output file\n  -r, --request-tx-receipt      get tx receipt\n  -t, --tx-receipt-file <file>  specify tx receipt file\n  -n, --disable-print           no print in stdio, used with --request-tx-receipt\n  -h, --help                    output usage information  Examples \n- command -s --save-file\n   node hammer get -s 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234  Returns  - downloads the file into the local folder. \n- command -o --output-file < file > \n  Downloads the file which is on the blockchain as bytes that will be put in a specified file by the user.  node hammer get -o \"example.txt\" 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234  Returns  - downloads the bytes of the file into specified file by the user, in this case - example.txt is the file being outputted.    r --request-tx-receipt\n  Outputs the transaction receipt.    node hammer get -r 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234  Returns  - a file with the tx and the tx in the console\n   TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAyMCBSZUNoZWNrCgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5Cm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbApjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbApjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQpBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFClNPRlRXQVJFLgo=   t --tx-receipt-file < file >\n  Outputs the transaction receipt in the console and saves it in the user specified file.    node hammer get -t tx.txt 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234  Returns  - the transaction receipt in tx.txt    n --disable-print    With this command you will not get the tx-receipt in the console, only in the file.  node hammer get -t tx.txt 0x80783e8c67d06e66d45219fcff329f63dba475d5ceb930d74ccf1b1a19397274 -i user-eth-1234.re -p 1234 -n",
            "title": "get / download a file from the blockchain"
        },
        {
            "location": "/#share",
            "text": "Shares a file with other users in the system. Can share to as many as the user wants  node hammer share <fileChainID> <recipientUserChainID> <anotherRecipientUserChainID> -i user-eth-1234.re -p 1234",
            "title": "share"
        },
        {
            "location": "/#verify",
            "text": "",
            "title": "verify"
        },
        {
            "location": "/#register-hash",
            "text": "",
            "title": "register-hash"
        },
        {
            "location": "/#check-hash",
            "text": "",
            "title": "check-hash"
        },
        {
            "location": "/#exec",
            "text": "",
            "title": "exec"
        },
        {
            "location": "/Examples/",
            "text": "Examples\n\n\nTo start with the tool you need to first have an account.",
            "title": "Examples"
        },
        {
            "location": "/Examples/#examples",
            "text": "To start with the tool you need to first have an account.",
            "title": "Examples"
        }
    ]
}